pipeline {
    agent any

    stages {
        stage('Clone') {
            steps {
                git url: 'https://github.com/panwars186/customer-churn-predictor.git', branch: 'main'
            }
            echo 'Cloning repository...'

        }
        echo 'Repository cloned successfully.'
        stage('Install Dependencies') {
            steps {
                bat 'pip install -r requirements.txt'
                echo 'Installing dependencies...'
                // Example: bat 'pip install -r requirements.txt'
            }
        }
        stage('Run Migrations (for test database)') {
            steps {
                // Django automatically sets up a separate test database for `manage.py test`
                // but running makemigrations ensures everything is up-to-date
                // This step is more crucial if you actually had models and needed to create tables
                bat 'python manage.py makemigrations --noinput'
                bat 'python manage.py migrate --noinput'
            }
        }
        stage('Run Tests') {
            steps {
                bat 'python manage.py test myapp' // Run tests for your specific app
                // Or sh 'python manage.py test' to run all tests
            }
        }
        stage('Run Application (for demonstration/integration test)') {
            steps {
                // For a quick demonstration, run the server in the background
                // In a real CI/CD, you might deploy to a temporary environment instead
                bat 'nohup python manage.py runserver 0.0.0.0:8000 > django_app.log 2>&1 &'
                bat 'sleep 10' // Give Django time to start up (can take longer than Flask)
                bat 'curl -v http://localhost:8000/' // Make a request to verify it's running
                bat 'echo "Django app started. Check console output for URL and curl output."'
            }
        }
        post {
        always {
            echo 'Pipeline finished.'
            // If you ran the app in the background, you might want to stop it here
            // sh 'pkill -f "python manage.py runserver"' // Use with caution
            cleanWs()
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }





        unstable {
            echo 'Pipeline is unstable. Check logs for details.'
        }
        changed {
            echo 'Pipeline state has changed. Check logs for details.'
}
}